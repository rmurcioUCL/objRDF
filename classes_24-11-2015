from rdflib import URIRef, Namespace, Graph
from rdflib import Literal
import uuid
import csv
from rdflib import XSD
import random
import string

class Tree:
    def __init__(self, g):
        self.g = g
        self.prefixes = {'geo': 'http://www.w3.org/2003/01/geo/wgs84_pos#',
            'foaf': 'http://xmlns.com/foaf/0.1/',
            'geom': 'http://geovocab.org/geometry#',
            'transit': 'http://vocab.org/transit/terms/',
            'locn': 'http://www.w3.org/ns/locn#',
            'vcard': 'http://www.w3.org/2006/vcard/ns#',
            'dcterms': 'http://purl.org/dc/terms/',
            'schema': 'http://schema.org/',
            'geosparql': 'http://www.opengis.net/ont/geosparql#',
            'unknown': 'http://data.linkedevents.org/def/unknown#',
            'rdfs': 'http://www.w3.org/2000/01/rdf-schema#',
            'dul': 'http://ontologydesignpatterns.org/ont/dul/DUL.owl#',
            'naptan': 'http://transport.data.gov.uk/def/naptan/',
            'owl': 'http://www.w3.org/2002/07/owl#',
            'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
            'locationOnt': 'http://data.linkedevents.org/def/location#',
            'dc': 'http://purl.org/dc/elements/1.1/',
            'travel': 'http://3cixty.com/ontology#',
            'qb': 'http://purl.org/linked-data/cube#',
            'dct': 'http://purl.org/dc/terms/',
            'sf': 'http://www.opengis.net/ont/sf#',
            'acco': 'http://purl.org/acco/ns#',
            'gr': 'http://purl.org/goodrelations/v1#',
            'locationRes': 'http://data.linkedevents.org/location/',
            'rev': 'http://purl.org/stuff/rev#',
            'sioc': 'http://rdfs.org/sioc/ns#',
            'seegrid': 'http://def.seegrid.csiro.au/isotc211/iso19115/2003/code/MaintenanceFrequency/'
            }

    def namespaces(self):
        for prefix, namespace in self.namespace_manager.namespaces():
            yield prefix, namespace

    def bindingPrefixes(self, g):
        for key in self.prefixes:
            self.g.bind(key, URIRef(self.prefixes[key]))
        return self.g

class RDF:
    def __init__(self):
        self.geo = Namespace("http://www.w3.org/2003/01/geo/wgs84_pos#")
        self.foaf = Namespace("http://xmlns.com/foaf/0.1/")
        self.geom = Namespace("http://geovocab.org/geometry#")
        self.unknown = Namespace("http://data.linkedevents.org/def/unknown#")
        self.transit = Namespace("http://vocab.org/transit/terms/")
        self.locn = Namespace("http://www.w3.org/ns/locn#")
        self.vcard = Namespace('http://www.w3.org/2006/vcard/ns#')
        self.dcterms = Namespace("http://purl.org/dc/terms/")
        self.schema = Namespace('http://schema.org/')
        self.geosparql = Namespace("http://www.opengis.net/ont/geosparql#")
        self.rdfs = Namespace('http://www.w3.org/2000/01/rdf-schema#')
        self.naptan = Namespace('http://transport.data.gov.uk/def/naptan/')
        self.owl = Namespace('http://www.w3.org/2002/07/owl#')
        self.rdf = Namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#")
        self.locationOnt = Namespace("http://data.linkedevents.org/def/location#")
        self.dul = Namespace('http://ontologydesignpatterns.org/ont/dul/DUL.owl#')
        self.dc = Namespace('http://purl.org/dc/elements/1.1/')
        self.travel = Namespace('http://3cixty.com/ontology#')
        self.qb = Namespace('http://purl.org/linked-data/cube#')
        self.dct = Namespace('http://purl.org/dc/terms/')
        self.sf = Namespace("http://www.opengis.net/ont/sf#")
        self.locationRes = Namespace('http://data.linkedevents.org/location/')
        self.acco = Namespace("http://purl.org/acco/ns#")
        self.gr = Namespace('http://purl.org/goodrelations/v1#')
        self.rev = Namespace('http://purl.org/stuff/rev#')
        self.sioc = Namespace('http://rdfs.org/sioc/ns#')
        self.seegrid = Namespace('http://def.seegrid.csiro.au/isotc211/iso19115/2003/code/MaintenanceFrequency/')

    def getUid(self, r0, ns):
        placeUri = ns
        idencode = r0.encode('utf-8')
        uid = uuid.uuid5(placeUri, idencode)
        return uid

class Tube(RDF):
    def __init__(self, x, y, station, description, wkt, lines=[]):
        RDF.__init__(self)
        self.x = x
        self.y = y
        self.station = str(station).strip()
        self.description = str(description).strip()
        self.wkt = wkt
        self.lines = lines
        self.businessType = 'http://data.linkedevents.org/kos/3cixty/subway'
        self.publisher = 'https://tfl.gov.uk'

    def createStation(self):
        stationName = URIRef('http://data.linkedevents.org/transit/London/subwayStop/' + Literal(self.station).replace(" ", ""))
        return stationName

    def createStationGeom(self):
        stationGeom = URIRef(self.createStation() + '/geometry')
        return stationGeom

    def addStationLine(self, g):
        for i in self.lines:
            singleLine = URIRef('http://data.linkedevents.org/transit/London/subwayRoute/' + Literal(i).replace(" ", ""))
            g.add((self.createStation(), self.transit.route, singleLine))
        return g

    def createGraph(self, g):
        name = self.createStation()
        geom = self.createStationGeom()

        g.add((name, self.rdf.type, self.transit.Station))
        g.add((name, self.rdf.type, self.dul.Place))
        g.add((name, self.rdfs.label, Literal(self.station)))
        g.add((name, self.dct.description, Literal(self.description)))
        g.add((name, self.geo.location, geom))
        g.add((name, self.locationOnt.businessType, URIRef(Literal(self.businessType))))
        g.add((name, self.dc.publisher, URIRef(Literal(self.publisher))))
        g.add((geom, self.rdf.type, self.geo.Point))
        g.add((geom, self.geo.lat, Literal(self.y, datatype=XSD.double)))
        g.add((geom, self.geo.long, Literal(self.x, datatype=XSD.double)))
        g.add((geom, self.locn.geometry, Literal(self.wkt, datatype=self.geosparql.wktLiteral)))

        self.addStationLine(g)
        return g

class Line(Tube):
    def __init__(self):
        RDF.__init__(self)
        self.lines = ['Bakerloo',
                      'Central',
                      'Circle',
                      'District',
                      'Hammersmith & City',
                      'Jubilee',
                      'Metropolitan',
                      'Northern',
                      'Piccadilly',
                      'Victoria',
                      'Waterloo & City']

    def addAllLines(self, g):
        for i in self.lines:
            line = URIRef('http://data.linkedevents.org/transit/London/subwayRoute/' + Literal(i).replace(" ", ""))
            g.add((line, self.rdf.type, self.transit.SubwayRoute))
        return g

class TimeBetween(Tube):
    def __init__(self, id, origin, time, destination):
        RDF.__init__(self)
        self.id = str(id).strip()
        self.origin = str(origin).strip()
        self.time = str(time).strip()
        self.destination = str(destination).strip()

    def createTimeBetween(self):
        timeBetween = URIRef('http://data.linkedevents.org/travel/London/timeBetween#' + Literal(self.id))
        return timeBetween

    def overrideCreateStation(self, name):
        stname = URIRef('http://data.linkedevents.org/transit/London/subwayStop/' + Literal(name).replace(" ", ""))
        return stname

    def createGraph(self, g):
        timeBetween = self.createTimeBetween()

        origin = self.overrideCreateStation(self.origin)
        destination = self.overrideCreateStation(self.destination)

        g.add((timeBetween, self.rdf.type, self.qb.Observation))
        g.add((timeBetween, self.travel.origin, origin))
        g.add((timeBetween, self.travel.destination, destination))
        g.add((timeBetween, self.travel.travelTime, Literal(self.time, datatype=XSD.int)))
        return g

class Bus(RDF):
    def __init__(self, stopId, x, y, label, wkt, addressLocality, adminUnit, publisher, businessType):
        RDF.__init__(self)
        self.stopId = stopId
        self.stopGUID = self.getUid(stopId, self.naptan)
        self.x = x
        self.y = y
        self.label = label
        self.wkt = wkt
        self.addressLocality = addressLocality
        self.adminUnit = adminUnit
        self.publisher = publisher
        self.businessType = businessType

    def createBusStop(self):
        busStop = URIRef("http://data.linkedevents.org/transit/London/stop/" + Literal(self.stopId).replace(" ", ""))
        return busStop

    def createGeometry(self):
        busStopGeom = URIRef('http://data.linkedevents.org/location/' + Literal(self.stopGUID) + '/geometry')
        return busStopGeom

    def createAddress(self):
        stopAddress = URIRef('http://data.linkedevents.org/location/' + Literal(self.stopGUID) + '/address')
        return stopAddress

    def createLabel(self):
        title = Literal(str(self.label).title())
        return title

    def createGraph(self, g):
        busStop = self.createBusStop()
        address = self.createAddress()
        geom = self.createGeometry()
        label = Literal(self.createLabel())

        g.add((busStop, self.rdf.type, self.naptan.BusStop))
        g.add((busStop, self.rdf.type, self.dul.Place))
        g.add((busStop, self.rdf.type, self.transit.Stop))
        g.add((busStop, self.dc.identifier, Literal(self.stopId)))
        g.add((busStop, self.geom.geometry, geom))

        g.add((address, self.rdf.type, self.schema.PostalAddress))
        g.add((address, self.rdf.type, self.dcterms.Location))
        g.add((address, self.dcterms.title, label))
        g.add((address, self.schema.streetAddress, label))
        g.add((address, self.locn.address, label))
        g.add((address, self.schema.addressLocality, Literal(self.addressLocality)))
        g.add((address, self.locn.adminUnit12, Literal(self.adminUnit)))

        g.add((geom, self.rdf.type, self.geo.Point))
        g.add((geom, self.geo.lat, Literal(self.y, datatype=XSD.double)))
        g.add((geom, self.geo.long, Literal(self.x, datatype=XSD.double)))
        g.add((geom, self.locn.geometry, Literal(self.wkt, datatype=self.geosparql.wktLiteral)))

        g.add((busStop, self.geo.location, geom))
        g.add((busStop, self.schema.location, address))
        g.add((busStop, self.locn.address, address))
        g.add((busStop, self.dc.publisher, Literal(self.publisher)))
        g.add((busStop, self.locationOnt.businessType, Literal(self.businessType)))
        g.add((busStop, self.rdfs.label, label))
        return g

class Busline(Bus):
    def __init__(self, route, run, wkt, label):
        RDF.__init__(self)
        self.route = route
        self.run = run
        self.wkt = Literal(wkt)
        self.label = Literal(str(label).title())

    def createBusline(self):
        busline = URIRef('http://data.linkedevents.org/transit/London/busLine/' + Literal(self.route))
        return busline

    def createBuslineGeom(self):
        buslineGeom = URIRef(self.createBusline() + '/geometry')
        return buslineGeom

    def createRoute(self):
        busRoute = URIRef('http://data.linkedevents.org/transit/London/route/' + Literal(self.route))
        return busRoute

    def createRouteService(self):
        routeService = URIRef('http://data.linkedevents.org/transit/London/service/' + Literal(self.route) + '_' + Literal(self.run))
        return routeService

    def createGraph(self, g):
        busline = self.createBusline()
        geom = self.createBuslineGeom()
        route = self.createRoute()
        service = self.createRouteService()
        label = self.createLabel()

        g.add((busline, self.rdf.type, self.transit.BusRoute))
        g.add((busline, self.geo.location, geom))
        g.add((busline, self.rdfs.label, label))
        g.add((busline, self.transit.RouteService, service))
        g.add((busline, self.transit.route, route))
        g.add((geom, self.rdf.type, self.sf.LineString))
        g.add((geom, self.locn.geometry, self.wkt))
        return g

class BusCorrespondence(Busline):
    def __init__(self, stopId, route, run, sequence):
        RDF.__init__(self)
        self.stopId = stopId
        self.route = route
        self.run = run
        self.sequence = sequence
        self.service = str(route) + '_' + str(run)

    def createServiceStop(self):
        serviceStopId = URIRef('http://data.linkedevents.org/transit/London/serviceStop/' + Literal(self.service) + '/' + Literal(self.stopId))
        return serviceStopId

    def createService(self):
        service = URIRef('http://data.linkedevents.org/transit/London/service/' + Literal(self.service))
        return service

    def createGraph(self, g):
        servStop = self.createServiceStop()
        stop = self.createBusStop()
        serv = self.createService()

        g.add((servStop, self.rdf.type, self.transit.ServiceStop))
        g.add((servStop, self.transit.service, serv))
        g.add((servStop, self.transit.sequence, Literal(self.sequence, datatype=XSD.int)))
        g.add((servStop, self.transit.stop, stop))
        return g

class Area(RDF):
    def __init__(self, name, code, geom):
        RDF.__init__(self)
        self.name = str(name).strip()
        self.code = str(code).strip()
        self.geom = geom

    def createArea(self):
        area = URIRef('http://data.linkedevents.org/transit/London/area/' + Literal(self.code))
        return area

    def createAreaGeom(self):
        areaGeom = URIRef(self.createArea() + '/geometry')
        return areaGeom

    def createGraph(self, g):
        area = self.createArea()
        geom = self.createAreaGeom()
        g.add((area, self.rdf.type, self.schema.AdministrativeArea))
        g.add((area, self.rdfs.label, Literal(self.name.title())))
        g.add((area, self.dct.identifier, Literal(self.code)))
        g.add((area, self.geo.location, geom))
        g.add((geom, self.rdf.type, self.geo.Multipolygon))
        g.add((geom, self.locn.geometry, Literal(self.geom)))
        return g

class Place(RDF):
    def __init__(self):
        RDF.__init__(self)

    def createNtGraph(self, g):
        g.add((self.res, self.rdf.type, self.dul.Place))
        return g

class Hotel(Place):
    def __init__(self, id, name, x, y, wkt, postcode, address, website, description):
        Place.__init__(self)
        self.id = self.getUid(id, self.locationRes)
        self.name = name
        self.x = x
        self.y = y
        self.wkt = wkt
        self.postcode = postcode
        self.address = address
        self.website = website
        self.description = description

        self.res = URIRef("http://data.linkedevents.org/location/" + Literal(self.id))
        self.geom = URIRef(str(self.res) + '/geometry')
        self.addr = URIRef(str(self.res) + '/address')

        self.publisher = URIRef('http://www.openstreetmap.org/planet.osm')
        self.businessType = URIRef('http://data.linkedevents.org/kos/3cixty/hotel')

    def createGraph(self, g):
        g.add((self.res, self.rdf.type, self.locationOnt.Hotel))
        g.add((self.res, self.rdf.type, self.acco.Hotel))
        g.add((self.res, self.locationOnt.businessType, Literal("Hotel")))
        g.add((self.res, self.schema.name, Literal("Hotel")))
        g.add((self.res, self.dc.publisher, self.publisher))
        g.add((self.res, self.geo.location, self.geom))
        g.add((self.res, self.locn.address, self.addr))
        g.add((self.geom, self.rdf.type, self.geo.Point))
        g.add((self.geom, self.geo.lat, Literal(self.x, datatype=XSD.double)))
        g.add((self.geom, self.geo.long, Literal(self.y, datatype=XSD.double)))
        g.add((self.geom, self.locn.geometry, Literal(self.wkt, datatype=self.geo.wktLiteral)))
        g.add((self.addr, self.rdf.type, self.acco.Hotel))
        g.add((self.addr, self.dcterms.Title, Literal(self.name)))
        g.add((self.addr, self.schema.address, Literal(self.address)))
        g.add((self.addr, self.schema.postalAddress, Literal(self.postcode)))
        #g.add((self.addr, self.gr.description, Literal(self.description)))
        g.add((self.addr, self.foaf.page, Literal(self.website)))
        g.add((self.addr, self.geo.location, self.geom))
        return g

class Airbnb(Place):
    def __init__(self, id, name, host_id, host_name, neighbourhood, x, y, wkt, room_type, price, minimum_nights,
                 number_of_reviews, last_review, reviews_per_month, calculated_host_listings_count, availability_365):
        Place.__init__(self)
        self.id = self.getUid(id, self.locationRes)
        self.name = name
        self.host_id = host_id
        self.host_name = host_name
        self.neighbourhood = neighbourhood
        self.x = x
        self.y = y
        self.wkt = wkt
        self.room_type = room_type
        self.price = price
        self.minimum_nights = minimum_nights
        self.number_of_reviews = number_of_reviews
        self.last_review = last_review
        self.reviews_per_month = reviews_per_month
        self.calculated_host_listings_count = calculated_host_listings_count
        self.availability_365 = availability_365

        self.res = URIRef("http://data.linkedevents.org/location/" + Literal(self.id))
        self.geom = URIRef(str(self.res) + '/geometry')
        self.addr = URIRef(str(self.res) + '/address')

        self.publisher = URIRef('http://www.airbnb.com')
        self.businessType = URIRef('http://data.linkedevents.org/kos/3cixty/hotel')

    def createGraph(self, g):
        g.add((self.res, self.rdf.type, self.locationOnt.Accommodation))
        g.add((self.res, self.rdf.type, self.gr.Offering))
        g.add((self.res, self.sioc.has_host, Literal(self.host_name)))
        #g.add((self.res, self.sioc.id, Literal(self.host_id)))
        g.add((self.res, self.sioc.last_reply_date, Literal(self.last_review, datatype=XSD.date)))
        g.add((self.res, self.gr.description, Literal(self.name)))
        g.add((self.res, self.gr.hasCurrencyValue, Literal(self.price, datatype=XSD.GBP)))
        g.add((self.res, self.gr.hasUnitOfMeasurement, Literal(self.minimum_nights, datatype=XSD.minimumNights)))
        g.add((self.res, self.sioc.num_replies, Literal(self.number_of_reviews, datatype=XSD.reviews)))
        g.add((self.res, self.seegrid.monthly, Literal(self.reviews_per_month, datatype=XSD.reviewsMonthly)))
        g.add((self.res, self.sioc.host_of, Literal(self.calculated_host_listings_count, datatype=XSD.listings)))
        g.add((self.res, self.seegrid.annually, Literal(self.availability_365, datatype=XSD.days)))
        g.add((self.res, self.rdf.type, self.acco.Accommodation))
        g.add((self.res, self.locationOnt.businessType, Literal(self.room_type)))
        g.add((self.res, self.schema.name, Literal("Accommodation")))
        g.add((self.res, self.dc.publisher, self.publisher))
        g.add((self.res, self.geo.location, self.geom))
        g.add((self.res, self.locn.address, self.addr))
        g.add((self.geom, self.rdf.type, self.geo.Point))
        g.add((self.geom, self.geo.lat, Literal(self.x, datatype=XSD.double)))
        g.add((self.geom, self.geo.long, Literal(self.y, datatype=XSD.double)))
        g.add((self.geom, self.locn.geometry, Literal(self.wkt, datatype=self.geo.wktLiteral)))
        g.add((self.addr, self.rdf.type, self.acco.Hotel))
        g.add((self.addr, self.dcterms.addressLocality, Literal(self.neighbourhood)))
        g.add((self.addr, self.geo.location, self.geom))
        return g

class RDFCreator:
    def __init__(self):
        self.data = []
        self.g = Graph()
        tree = Tree(self.g)
        tree.bindingPrefixes(self.g)

    def createTubeObj(self, path):
        line = Line()
        line.addAllLines(self.g)
        with open(path, 'rU') as f:
            f.next()
            for line in csv.reader(f, dialect='excel'):
                self.data.append(Tube(line[1], line[2], line[3], line[4], line[5], line[6:]))
            return self.data

    def createTubeTimeObj(self, path):
        with open(path, 'rU') as f:
            f.next()
            for line in csv.reader(f, dialect='excel'):
                self.data.append(TimeBetween(line[0], line[1], line[3], line[2]))
            return self.data

    def createBusStopObj(self, path):
        with open(path, 'rU') as f:
            f.next()
            for line in csv.reader(f, dialect='excel', delimiter=','):
                self.data.append(Bus(line[0], line[1], line[2], line[3], line[4], 'London', 'London', 'https://tfl.gov.uk/modes/buses/', 'http://data.linkedevents.org/kos/3cixty/busstop' ))
            return self.data

    def createBuslineObj(self, path):
        with open(path, 'rU') as f:
            f.next()
            for line in csv.reader(f, dialect='excel'):
                self.data.append(Busline(line[0], line[1], line[3], line[2]))
            return self.data

    def createBusCorrespondenceObj(self, path):
         with open(path, 'rU') as f:
             f.next()
             for line in csv.reader(f, dialect='excel'):
                 self.data.append(BusCorrespondence(line[1], line[3], line[4], line[5]))
             return self.data

    def createAreasObj(self, path):
        with open(path, 'r') as f:
            f.next()
            for line in csv.reader(f, dialect='excel', delimiter=';'):
                self.data.append(Area(line[0], line[1], line[2]))
            return self.data

    def createHotelObj(self, path):
        with open(path, 'rU') as f:
            f.next()
            for line in csv.reader(f, dialect='excel'):
                self.data.append(Hotel(line[0], line[1], line[2], line[3], line[4], line[5], line[6], line[7], line[8]))
            return self.data

    def createAirbnbObj(self, path):
        with open(path, 'rU') as f:
            f.next()
            for line in csv.reader(f, dialect='excel'):
                self.data.append(Airbnb(line[0], line[1], line[2], line[3], line[4], line[5], line[6], line[7], line[8], line[9], line[10], line[11], line[12], line[13], line[14], line[15]))
            return self.data

    def createNt(self):
        for i in self.data:
            i.createNtGraph(self.g)
        return self.g

    def createRDF(self):
        for i in self.data:
            i.createGraph(self.g)
        return self.g

#------------------------------------------------- Places classes ------------------------------------------------------
def mainPlace(source, ntpath, ttlpath, className):
    rdf = RDFCreator()
    if className == 'Hotel':
        rdf.createHotelObj(source)
    elif className == 'Airbnb':
        rdf.createAirbnbObj(source)
    else:
        print('Invalid className - either Hotel or Airbnb. Check if accurate.')
    rdf.createNt().serialize(format='nt', destination=ntpath)
    rdf.createRDF().serialize(format='turtle', destination=ttlpath)
    print('The files in place.')

source = '/Users/Agata/Desktop/airbnb_smpl.csv'
ntpath = '/Users/Agata/Desktop/test_airbnb_nt.ttl'
ttlpath = '/Users/Agata/Desktop/test_airbnb.ttl'

mainPlace(source, ttlpath, ntpath, 'Airbnb') #run

#------------------------------------------------- Transport classes ---------------------------------------------------
def mainTransport(source, ttlpath, className):
    rdf = RDFCreator()
    if className == 'Tube':
        rdf.createTubeObj(source)
    elif className == 'TimeBetween':
        rdf.createTubeTimeObj(source)
    elif className == 'Bus':
        rdf.createBusStopObj(source)
    elif className == 'Busline':
        rdf.createBuslineObj(source)
    elif className == 'BusCorrespondence':
        rdf.createBusCorrespondenceObj(source)
    elif className == 'Area':
        rdf.createAreasObj(source)
    else:
        print('Not valid className. Try any of these case-sensitive: Tube, TimeBetween, Bus, Busline, BusCorrespondence, Area.')
    rdf.createRDF().serialize(format='turtle', destination=ttlpath)
    print('The file in place.')

ttlpath = '/Users/Agata/Desktop/test.ttl'
#source = '/Users/Agata/Desktop/airbnb_db.csv'
#ntpath = '/Users/Agata/Desktop/airbnb_nt_test.ttl'
#mainAirbnb(source, ntpath, ttlpath) #uncomment to run
#source='/Users/Agata/Desktop/buses_24-11-2015.csv' #Bus
#source = '/Users/Agata/Desktop/London/Buslines/busline_content.csv' #busline
#source = '/Users/Agata/Desktop/London/Bus correspondence/busCorrespondence.csv' #bus correspondence
#source = '/Users/Agata/Desktop/London/Areas/boroughs_scolon.csv' #areas
#source = '/Users/Agata/Desktop/London/Tube/tubes.csv' #tube
#source = '/Users/Agata/Desktop/London/Tubelines/time_between_ids.csv' #time between

mainTransport(source, ttlpath, 'TimeBetween') #run
